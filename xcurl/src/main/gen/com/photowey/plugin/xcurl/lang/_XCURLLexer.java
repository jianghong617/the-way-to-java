/*
 * Copyright Â© 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.photowey.plugin.xcurl.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.photowey.plugin.xcurl.lang.XCURLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_XCURLLexer.flex</tt>
 */
public class _XCURLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\4\2\22\0\1\57\1\16\1\22\1\17\1\0\2\17\1\20\2\0\1\24\1\17\1\16\1"+
    "\25\1\16\1\15\12\23\1\14\1\16\1\0\1\17\1\0\1\16\1\17\1\31\1\17\1\51\1\45\1"+
    "\43\1\17\1\36\1\41\1\55\2\17\1\53\1\17\1\54\1\47\1\46\1\17\1\56\1\50\1\44"+
    "\1\52\2\17\1\37\1\17\1\23\1\0\1\21\2\0\1\23\1\0\1\26\2\23\1\30\1\13\1\10\1"+
    "\34\1\4\1\11\2\23\1\12\1\23\1\27\1\42\1\6\1\40\1\33\1\7\1\5\1\32\3\23\1\35"+
    "\1\23\1\0\1\17\1\0\1\17\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\3\1\2\2\1\4\11\2\1\3"+
    "\3\1\1\5\2\0\1\6\5\0\2\7\11\0\3\1"+
    "\11\0\1\10\7\0\1\1\17\0\1\11\1\0\1\5"+
    "\14\0\1\7\12\0\1\12\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0150\0\60\0\u0480\0\u0180\0\u01b0\0\u04b0\0\u04e0\0\u0510"+
    "\0\60\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\60\0\u0930"+
    "\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\60\0\u0d80"+
    "\0\u0780\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u10e0\0\u1200\0\u1230\0\u1260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\3\5\1\6\3\5\1\2\1\7"+
    "\2\2\1\10\1\11\1\12\1\5\1\2\1\13\10\5"+
    "\1\14\1\2\1\5\1\15\1\5\1\2\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\5\2\1\23\62\0\2\3"+
    "\53\0\1\3\4\0\1\5\1\24\6\5\7\0\1\5"+
    "\2\0\10\5\2\0\1\5\1\0\1\5\21\0\10\5"+
    "\7\0\1\5\2\0\10\5\2\0\1\5\1\0\1\5"+
    "\21\0\1\5\1\25\3\5\1\26\2\5\7\0\1\5"+
    "\2\0\10\5\2\0\1\5\1\0\1\5\32\0\1\27"+
    "\6\0\1\30\33\0\20\31\1\32\1\33\36\31\21\0"+
    "\1\11\35\0\1\34\21\35\1\36\1\32\35\35\25\0"+
    "\1\37\1\40\1\0\3\41\3\0\2\41\1\0\2\41"+
    "\60\0\1\42\57\0\1\43\72\0\1\44\44\0\1\45"+
    "\45\0\1\46\15\0\1\47\2\0\1\42\53\0\1\50"+
    "\60\0\1\51\2\0\1\52\7\0\2\3\15\0\1\11"+
    "\35\0\1\23\4\0\1\5\1\53\6\5\7\0\1\5"+
    "\2\0\10\5\2\0\1\5\1\0\1\5\21\0\2\5"+
    "\1\54\5\5\7\0\1\5\2\0\10\5\2\0\1\5"+
    "\1\0\1\5\21\0\6\5\1\55\1\5\7\0\1\5"+
    "\2\0\10\5\2\0\1\5\1\0\1\5\15\0\1\27"+
    "\2\0\55\27\24\0\1\56\33\0\1\31\2\0\55\31"+
    "\1\35\2\0\55\35\4\0\1\57\21\0\1\60\1\0"+
    "\1\61\1\0\1\62\1\63\1\64\5\0\1\65\44\0"+
    "\1\66\74\0\1\67\44\0\1\70\57\0\1\71\101\0"+
    "\1\72\50\0\1\73\63\0\1\42\53\0\1\74\67\0"+
    "\1\75\61\0\1\76\5\0\2\5\1\77\5\5\7\0"+
    "\1\5\2\0\10\5\2\0\1\5\1\0\1\5\21\0"+
    "\10\5\1\100\6\0\1\5\2\0\10\5\2\0\1\5"+
    "\1\0\1\5\21\0\7\5\1\54\7\0\1\5\2\0"+
    "\10\5\2\0\1\5\1\0\1\5\15\0\1\56\2\0"+
    "\21\56\1\101\33\56\13\0\1\102\52\0\1\103\77\0"+
    "\1\104\40\0\1\105\63\0\1\106\57\0\1\107\76\0"+
    "\1\110\62\0\1\111\67\0\1\67\63\0\1\112\51\0"+
    "\1\113\65\0\1\114\63\0\1\115\56\0\1\116\56\0"+
    "\1\117\10\0\3\5\1\54\4\5\1\100\6\0\1\5"+
    "\2\0\10\5\2\0\1\5\1\0\1\5\32\0\1\120"+
    "\42\0\1\56\2\0\12\56\1\121\6\56\1\101\33\56"+
    "\26\0\1\122\37\0\1\123\56\0\1\124\65\0\1\125"+
    "\104\0\1\126\24\0\1\41\57\0\1\127\100\0\1\130"+
    "\74\0\1\67\60\0\1\112\54\0\1\67\65\0\1\131"+
    "\53\0\1\132\31\0\1\133\72\0\1\134\42\0\1\135"+
    "\72\0\1\41\64\0\1\136\56\0\1\137\33\0\1\140"+
    "\103\0\1\141\101\0\1\142\54\0\1\42\12\0\14\143"+
    "\3\0\1\143\1\0\32\143\14\0\1\144\73\0\1\145"+
    "\55\0\1\146\45\0\1\147\76\0\1\107\32\0\1\150"+
    "\122\0\1\67\13\0\10\151\1\143\1\151\1\143\1\151"+
    "\3\0\1\151\1\0\32\151\34\0\1\41\54\0\1\41"+
    "\55\0\1\152\40\0\1\107\54\0\1\41\107\0\1\153"+
    "\36\0\1\154\73\0\1\107\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4752];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\25\1\2\0\1\11\5\0\1\1\1\11"+
    "\11\0\3\1\11\0\1\11\7\0\1\1\17\0\1\11"+
    "\1\0\1\1\14\0\1\1\12\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _XCURLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _XCURLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BASIC_STRING;
            } 
            // fall through
          case 11: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 12: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 13: break;
          case 4: 
            { return NEWLINE;
            } 
            // fall through
          case 14: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 15: break;
          case 6: 
            { return QUOTED_STRING;
            } 
            // fall through
          case 16: break;
          case 7: 
            { return OPTION;
            } 
            // fall through
          case 17: break;
          case 8: 
            { return METHOD;
            } 
            // fall through
          case 18: break;
          case 9: 
            { return CURL;
            } 
            // fall through
          case 19: break;
          case 10: 
            { return URL;
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
